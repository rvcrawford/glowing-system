---
title: Near Infra-Red Spectroscopy Predicts Crude Protein in Hemp Grain
execute:
  echo: false
author:
  - name: Ryan Crawford
    # orcid: 0000-0002-0760-5497
    corresponding: true
    email: rvc3@cornell.edu
    # roles:
    #   - Investigation
    #   - Project administration
    #   - Software
    #   - Visualization
    affiliations:
      - name: Cornell University
        address: 126 Medicago Drive
        city: Ithaca
        state: NY
        postal-code: 14853
  - name: Jamie Crawford
    # orcid: 0000-0002-0760-5497
    corresponding: false
    # roles:
    #   - Investigation
    #   - Project administration
    #   - Software
    #   - Visualization
    affiliations:
      - name: Cornell University
        address: 126 Medicago Drive
        city: Ithaca
        state: NY
        postal-code: 14853
  - name: Lawrence B. Smart
    # orcid: 0000-0002-7859-8394
    corresponding: false
    roles: []
    affiliations:
      - name: Cornell AgriTech
        address: 102 Hedrick Hall
        city: Geneva
        state: NY
        postal-code: 14456
  - name: Virginia Moore
    # orcid: 0000-0002-7859-8394
    corresponding: false
    roles: []
    affiliations:
      - name: Cornell University
        address: 162 Emerson Hall
        city: Ithaca
        state: NY
        postal-code: 14853    
keywords:
  - Hemp
  - Grain
  - Spectroscopy
abstract: |
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
plain-language-summary: |
  Earthquake data for the island of La Palma from the September 2021 eruption is found ...
key-points:
  - A web scraping script was developed to pull data from the Instituto Geogr√†phico Nacional into a machine-readable form for analysis
  - Earthquake events on La Palma are consistent with the presence of both mantle and crustal reservoirs.
date: last-modified
bibliography:
  - references.bib
  - grateful-refs.bib

# bibliography: grateful-refs.bib
  # - references.bib
  # - grateful-refs.bib
# csl: apa.csl
# citation:
#   container-title: Earth and Space Science
# number-sections: true
# bibliography: references.bib
# bibliography: references.bib
---

```{r}
#| include: false

library(tidyverse)
library(data.table)
library(caret)
library(prospectr)
library(pls)
library(tidymodels)
library(nlme)
```

**incomplete: may contain errors, run-ons, half-thoughts, etc.**

## INTRODUCTION

Hemp (Cannabis sativa L.) is an annual crop with potential uses as a source of food or feed from grain, and bast fiber or hurd from the stalk. Hemp cultivars are commonly grown for one or both purposes and a cultivar may be referred to as a grain, fiber, or dual-purpose type. Because of protein's nutritional importance, the protein content of a grain crop is an prime consideration for researchers, producers, and consumers. Whole hemp grain typically contains approximately 20-30% protein [@ely_industrial_2022; @barta_proteomic_2024; @callaway2004]. Crude protein (CP) is often used as a proxy for the direct measurement of protein concentration and consists of the multiplication of nitrogen concentration by a conversion factor because measuring nitrogen concentration is relatively easy and cheap via laboratory assay [@hayes_measuring_2020].

Near-infrared spectroscopy (NIRS) technology is rapid, non-destructive, and cheap, and consists of the measurement of NIR radiation reflected from a sample [@roberts_near-infrared_2004]. NIR spectra from many samples are related to laboratory values for components such as moisture, protein, fat, or fiber [@roberts_near-infrared_2004]. NIRS technology has been used since the 1970's to assess forage CP [@reeves_potential_2012; @williams_application_1975]. A NIRS calibration set often consists of samples from one species grown in many environments encompassing the range of expected values from the analyte or analytes [@chadalavada_nir_2022]. Partial least squares regression (PLSR) is a typical method used in the agricultural and food sciences to relate spectra to analyte [@roberts_near-infrared_2004]. PLSR calculates principal components (PCs) which relate to the dependent variable and summarize the spectra and uses a subset of PCs in order to fit the regression model. PLSR is commonly used in spectroscopy because it tends to work well with highly-correlated spectral data. Typically the number of principal components is chosen via cross-validation to avoid overfitting. **CITES FOR ALL OF THIS**

A NIRS-scanned sample of undamaged grain may subsequently be grown, an important consideration for a plant breeder. In wheat and corn, grain protein content has been shown to be heritable [@giancaspro_genetic_2019; @geyer_genetics_2022]. This suggests (at least potentially) that NIRS technology could serve as resource to more rapidly identify high CP hemp germplasm, enabling the delivery of higher CP hemp grain cultivars faster.

For this study, a benchtop NIR spectrometer was used to develop a model to predict CP content based on a data set of hemp grain representing multiple years, locations, and cultivars from grain and dual-purpose hemp types using PLSR.

## MATERIALS AND METHODS

```{r}
#| output: false

# bckgrnd <- fread("./input_data/simplified_data/background_data_set.csv") |> setDT()

# spectra <- fread("./input_data/simplified_data/train_test_crude_protein.csv")

 # bckgrnd[,in_ny:= ifelse(loc!="kentucky", T, F)]
 
# bg2 <- bckgrnd[loc!="kentucky"]

# extract indices of non-kentucky
# bg_indices <- bckgrnd[loc!="kentucky", which = T]

# correct names in bg2--should be h-51, NOT hl-51

# bg2[cultivar=="hl-51"]$cultivar <- "h-51"

# check to see if i did the calc correctly

# bg2[grepl("51", cultivar),]

 #looks good 
# tab <-  table(bckgrnd$in_ny)


# now take correct spectra filtering out stuff from KY

# spectra_2 <- spectra[bg_indices]

```

```{r}
# should be correct finalized data sets, 

# notably, switches sample 2 and 7 around

full_data <- fread("./input_data/final_data_set/full_hemp_data.csv")

tab <-  table(full_data$in_ny)

```

### Hemp Grain Sample Background

Spectral data were obtained from whole (unground) hemp grain samples, harvested at maturity, collected from 2017 - 2021 from `r nrow(distinct(full_data |> filter(loc!= "kentucky"), harv_year, loc))` cultivar trials in New York (NY) (`r tab[2]` samples). Grain samples were obtained by hand sampling or mechanical harvest and were cleaned of chaff and dried at 30 C for six days in a forced-air dryer. In total, `r full_data$cultivar |> unique() |> length()` cultivars were represented in the data set. Cultivars were grain or dual-purpose types and included both commercially available and experimental material.

All cultivar trials were planted in randomized complete block design with each cultivar replicated four times. The 2017 data were comprised of samples from the same thirteen cultivars sampled from six NY locations. For those trials, grain was harvested from each plot individually and aggregated by cultivar within each trial. Four subsamples were drawn from each aggregated sample and scanned separately. These spectra were averaged at each 2 nm increment. All remaining samples from 2018-2021 were collected on a per-plot basis. All possible cultivars and possible locations were represented in 2017, but only a selected subset of cultivars and locations were represented in 2018-2021.

### Spectral Data Collection and Preprocessing

A benchtop NIR spectrometer (FOSS/ NIR FOSS/ NIR Systems model 5000) was used to obtain the spectra (FOSS North America, Eden Prairie, MN, USA). Spectra were collected every 2 nm from 1100-2498 nm and the logarithm of reciprocal reflectance was recorded.

WINISI software version 1.02A (Infrasoft International, Port Matilda, PA, USA) was used to average the spectra in 2017, as well as to select samples for laboratory assay. Samples were selected according to their spectral distance from their nearest neighbor within the calibration data set with a cutoff of a distance of 0.6 H, where H is approximately equal to the squared Mahalanobis distance divided by the number of principal components used in the calculation [@garrido-varo_note_2019]. Prior to selection selection, spectra were preprocessed using SNV-detrend with settings 1,4,4,1 for the derivative, gap, smooth, and smooth 2 settings respectively.

### Laboratory Validation

Laboratory assays were performed by Dairy One Forage Laboratory (Ithaca, NY). For those assays, 1mm ground samples were analyzed by combustion using a CN628 or CN928 Carbon/Nitrogen Determinator. Samples from 2017 were aggregated as described above, but the remaining samples were not aggregated.

### Model Development

Calibration and validations sets were created by dividing the laboratory CP values into tertiles according to their percent CP in order to ensure that the range of CP values was present in both calibration and validation sets. Within each tertile, 75% of the samples were randomly assigned to the calibration set and the remaining 25% were assigned to the validation set. For each calibration set, models were developed in caret using PLSR. In fitting the model, the number of principal components was optimized over au grid search from 1-20. Model performance was evaluated with 25 iterations of bootstrapping and minimized root mean squared error (RMSE) in selecting the number of principal components in the final model [@kuhn2008].

```{r}
preproc_key <- fread("./input_data/final_data_set/preprocessing_key.csv")

preproc_key[,full_name:= c("Raw Spectra", "First Derivative", "Second Derivative","Savitzky-Golay", "Gap-segment Derivative",
                           "Standard Normal Variate", "Standard Normal Variate following Savitzky-Golay", "Standard Normal Variate-Detrend", "Multiplicative Scatter Correction")]
```

Initially a number of common spectral preprocessing methods were tested by creating 100 calibration and validation sets as described above. Spectral data from those data sets were transformed by each of the following methods: 1) first derivative, 2) Savitzky-Golay (SG), 3) gap-segment derivative, 4) standard normal variate (SNV), 4) standard normal variate following Savitzky-Golay (SNV-SG), 5) SNV-detrend, and 6) multiplicative scatter correction. For each of these preprocessing methods, models were fit and predictions were made on the corresponding validation set (since there were `r (preproc_key$full_name) |> unique() |> length()-1` preprocessing methods, `r preproc_key$full_name |> unique() |> length()-1` separate models were fit for each of the 100 sets. The relationship between the predicted and actual values of the validation set were calculated via RMSE, R^2^ and Ratio of Performance to InterQuartile distance (RPIQ). Analyses of variance (ANOVA) were performed for each of these metrics in order to compare the preprocessing methods. For each ANOVA, each data set was considered as a subject and allowing different variances for each preprocessing method.

Once the most promising preprocessing method was identified, 1000 more data sets were created and analyzed via that method and performance on the validation sets was summarized with RMSE, R^2^, and RPIQ.

### Additional software used

<!-- Additional analyses were performed using R Statistical Software [@r_core_team_r_2024]. Data were tabulated and summarized using the tidyverse and data.table \[@barrett_datatable_2024; @wickham_welcome_2019\]. PLSR models were constructed using the pls package and validated using caret \[@kuhn_building_2008; @liland_pls_2023\]. -->

```{r}
grateful::cite_packages(output = "paragraph", out.dir = ".")
```

## RESULTS AND DISCUSSION

### Laboratory assay CP values

Laboratory assay percent CP values are summarized in the following table. These are similar to the range of CP values observed in the literature, indicating an appropriate basis for a chemometric model. The CP values are left-skewed and two thirds of the samples contained more than 25% CP.

```{r}
#| label: tbl-lab-protein-vals
#| tbl-cap: Summary of Laboratory Assayed CP Values (Percent Dry Matter)

my_summary <- full_data$crude_protein |> skimr::skim()|> select(c(5:11)) |> 
  mutate_all(round, 1)
names(my_summary) <- c("mean", "sd", "minimum", "first quartile", "median", "third quartile", "maximum") |> str_to_title()

knitr::kable(my_summary)
```

### Preprocessing methods comparison

```{r}
# 
multi_metric <- metric_set(rmse, rsq, rpiq)


# read data back in to work with it

prep_key <- fread("./input_data/final_data_set/preprocessing_key.csv")

sims_key <- fread("./input_data/final_data_set/preprocessing_methods_test.csv")

long_form <- merge(sims_key, prep_key, all.x = T)

# now pull the metrics

# long_form[, multi_metric(y, value), by = c("id", "preproc")]

summaries <- long_form |> 
  filter(preproc!="second_derivative") |> 
  group_by(id, preproc) |> 
  multi_metric(y, value)

# # comparing methods over a series of metrics...
# summaries_with_models <- summaries |> 
#   mutate(id = as.character(id)) |> 
#   nest(data = -.metric) |> 
#   mutate(mod = map(data, ~lme4::lmer(.estimate ~ preproc + (1|id), data = .x)),
#          ems = map(mod, ~emmeans::emmeans(.x, "preproc") |> data.frame())
#          )
# 
# summaries_with_models_2 <- summaries_with_models |> 
#   select(1, ems) |> 
#   unnest(ems)

```

```{r}
# actually, let's summarize via nlme
# set our varident
vf2 <- varIdent(form= ~ 1|preproc)

# define custom contrasts
first_part <- rep(1/7,7)
contrast_full <- append(first_part, -1, after = 3)


custom <- list(preprocess_vs_raw = contrast_full)

nlme_summaries <- summaries |> 
  mutate(id = as.character(id)) |> 
  nest(data = -.metric) |> 
  mutate(
    mod_standard = map(data, ~nlme::lme(.estimate ~ preproc, random = ~1|id, data = .x, method ="ML")),
    
    mod_varident = map(data, ~nlme::lme(.estimate ~ preproc, random = ~1|id, weights = vf2, data = .x, method ="ML")),
    mod_compare = map2(mod_standard, mod_varident, ~anova(.x, .y)),
         ems = map(mod_varident, ~emmeans::emmeans(.x, "preproc") |>multcomp::cld() |>  data.frame()), 
             ems2 = map(mod_varident, ~emmeans::emmeans(.x, "preproc")),
                        contrast = map(ems2, ~emmeans::contrast(.x, custom))
                                       )



nlme_summaries_with_models_2 <- nlme_summaries |> 
  select(1, ems) |> 
  unnest(ems)
```

```{r}
# add full names

to_table <- nlme_summaries_with_models_2|> 
  left_join(preproc_key) |> 
  select('Preprocessing Method' = full_name, Metric = .metric, Estimate = emmean, SE) |> 
  mutate(Estimate = paste(format(round(Estimate, 2), nsmall = 2), "¬±", format(round(SE, 3), nsmall = 3)))
```

```{r}
contrasts <- nlme_summaries |> 
  select(.metric, contrast) |> 
  transmute(.metric, tidy_contrast = map(contrast, tidy)) |> 
  unnest(tidy_contrast)
  
```

```{r}
# lead_lag summaries
lead_lag <- nlme_summaries_with_models_2 |> select(1:4) |> 
  arrange(.metric, emmean)%>% 
  group_by(.metric) |> 
  mutate(lagged = lag(emmean)) %>% 
  mutate(pct_change = (emmean - lagged) / lagged)|> 
  mutate(lead = lead(emmean)) %>% 
  mutate(pct_change_lead = (emmean - lead) / lead)
```

```{r}
# percent change for contrasts

raw_contrast <- nlme_summaries_with_models_2 |> filter(preproc=="raw") |> 
  dplyr::select(1:3) |> 
  left_join(contrasts |> select(1,3,estimated_diff = 5)) |> 
  mutate(percent_difference = estimated_diff/(emmean+estimated_diff))
```

All preprocessing methods outperformed raw spectral data @tbl-preproc. The SNV-SG method had the lowest RMSE, highest R^2^, and highest RPIQ averaging over all iterations. SNV-SG RMSE averaged 1.4% lower, while R^2^ and RPIQ averaged 0.4% and 2.4% higher respectively than the next best preprocessing method (SG in both cases) but the difference between the best and second best method by metric were only statistically significant at $\alpha$ \<0.05 for RPIQ. Averaged together, all preprocessed spectra were superior to raw spectra, with lower RMSE, and higher R^2^ and RPIQ values (significant at $\alpha$ level \<0.001). Averaged together, preprocessing methods had `r round(raw_contrast$percent_difference[[1]]*100,1)` % lower RMSE, and had `r round(raw_contrast$percent_difference[[2]] * 100,1)`% higher R^2^ `r round(raw_contrast$percent_difference[[3]] *100,1)`% higher RPIQ than unprocessed spectra. Because the SNV-SG method was the best performing according to all metrics, a final model was developed using it.

```{r}
#| label: tbl-preproc
#| tbl-cap: Evaluation of Preprocessing Methods

# printable table of results

to_table2 <- to_table |> 
  select(1:3) |> 
  pivot_wider(names_from = Metric, values_from = Estimate) |> 
  arrange(rmse) |> 
  rename(RMSE = rmse, RPIQ = rpiq ) 
# names(to_table2)[3] <- "$^{2}$"
to_table2|> 
  knitr::kable(col.names = c("Preprocessing Method", "RMSE", "$R^{2}$", "RPIQ"))

```

**paragraph discussing relative merits of various preprocessing methods**

The methods examined represent a portion of those available. As well, preprocessing methods tend to have a number of user-adjustable parameters whose various permutations were not tested here. The subset of preprocessing methods and parameters tested here nonetheless contained substantial variations in resulting model quality, demonstrating the importance of the choice of preprocessing method.

### Final model development and summary

```{r}
model_n_comp_statistics <- fread("./input_data/final_data_set/final_model_n_component_stats.csv")

# define a function to calculate percent difference
pct_lower <- function(x){
  my_lag = data.table::shift(x, type = "lag")
  round((x - my_lag)/my_lag*100,2)
}

avg_change <- model_n_comp_statistics[,lapply(.SD, mean),.SDcols = 3:8, by= ncomp]

change_per_pc <- avg_change[, lapply(.SD, pct_lower), .SDcols = 2:7]
```

Models improved most rapidly as the number of principal components increased from 1 to 7, with the inclusion of each additional PC being associated with a decrease in RMSE of 5-12% . From 8 to 12 PCs, model performance continued to improve, although gains were more modest (decrease in RMSE of 0.7-3%). With 13 or more PCs, performance gains were minimal and the relative ranks of the models tended to be stable @fig-model-calibration.

```{r}
#| label: fig-model-calibration
#| fig-cap: Decreasing RMSE with increasing number of PCs


model_n_comp_statistics |> 
  ggplot(aes(as.factor(ncomp), RMSE)) + 
  geom_line(aes(group = id), alpha = 0.03) + 
  theme_classic() + 
  xlab("Crude Protein Model Number of Principal Components") + 
  ylab("Crude Protein Model Root Mean Squared Error")

```

```{r}
#| label: fig-final-metric-boxplot
#| fig-cap: Final model test set evaluations (1000 iterations per plot)


model_final_predictions <- fread("./input_data/final_data_set/final_model_predictions.csv")

# setnames(model_final_predictions, "V1", "crude_protein")


final_model_table <- model_final_predictions |> 
  group_by(id) |> 
  multi_metric(crude_protein, predicted_crude_protein)

final_model_table |> 
  ggplot(aes(x = .metric, y = .estimate)) + 
  theme_classic() + geom_boxplot() + 
  facet_wrap(vars(.metric), scales = "free") +
  xlab("Metric") + ylab("Estimate")
```

```{r}

# add difference calculation between predicted and observed...
model_final_predictions[,difference := predicted_crude_protein - crude_protein]

```

```{r}

# my_cut <- cut(spectra_2$crude_protein, 3)
# cut_dt <- data.table(ith_in_data_set = 1:149, cutpoints = my_cut)


# revised_model_cutpoints
cutpoints2 <- model_final_predictions |> 
  distinct(ith_in_data_set, crude_protein) |> 
  mutate(cutpoints = cut(crude_protein, 3))

```

```{r}
#| label: fig-validation_set_performance
#| fig-cap: Test set predictions versus normalized scores across hemp samples
# 
# model_final_predictions |> 
#   left_join(cut_dt) |> 
#   ggplot(aes(fct_reorder(
#     ith_in_data_set |> as.character(),
#     crude_protein), crude_protein))+
#   geom_point(aes(fct_reorder(
#     ith_in_data_set |> as.character(),
#     crude_protein), difference), alpha = 0.05, shape = 2) +
#     geom_hline(yintercept = 0, linewidth = 2, lty = 2)+
#   facet_wrap( ~cutpoints, scales = "free_x",
#           labeller = as_labeller(c("(20.8,24.1]" = "Low (20.8 - 24.1)",
#                                    "(24.1,27.5]"= "Medium (24.2 - 27.5)",
#                                    "(27.5,30.8]" ="High (27.6-30.8)"))) + 
#     theme_classic()+
#   theme(
#     axis.title.x = element_blank(),
#     axis.text.x = element_blank())

model_final_predictions |> 
  left_join(cutpoints2) |> 
  ggplot(aes(fct_reorder(
    ith_in_data_set |> as.character(),
    crude_protein), crude_protein))+
  geom_point(aes(fct_reorder(
    ith_in_data_set |> as.character(),
    crude_protein), difference), alpha = 0.05, shape = 2) +
  geom_hline(yintercept = 0, linewidth = 2, lty = 2) +
  facet_wrap( ~cutpoints, scales = "free_x",
              labeller = as_labeller(c("(20.8,24.1]" = "Low CP (20.8 - 24.1%)",
                                       "(24.1,27.5]"= "Medium CP (24.2 - 27.5%)",
                                       "(27.5,30.8]" ="High CP (27.6-30.8%)"))) + 
  theme_classic()+
  theme(
    axis.title.x = element_blank(),
    axis.text.x = element_blank())

```

Errors tend to be lower at higher levels of actual CP

This study is limited in that it represents the creation of one model based upon spectra collected from one machine. NIRS calibrations can be unique to a particular machine, if the machines compared are of the same model [@reeves2012]. As well, the calibration and validation sets are relatively small.

This research showed the promise of the use of NIRS in order to make predictions concerning %CP in hemp grain using PLS. Promising preprocessing methods were identified and a model was validated. Further research could refine the model by including more samples or by examining other predictive methods.

## ACKNOWLEDGMENTS

## SUPPLEMENTAL MATERIAL

## OPTIONAL SECTIONS

## REFERENCES

## FIGURES AND TABLES

```{r}
eruptions <- c(1492, 1585, 1646, 1677, 1712, 1949, 1971, 2021)
n_eruptions <- length(eruptions)
```

```{r}
#| label: fig-timeline
#| fig-cap: Timeline of recent earthquakes on La Palma
#| fig-alt: An event plot of the years of the last 8 eruptions on La Palma.
#| fig-height: 1.5
#| fig-width: 6
par(mar = c(3, 1, 1, 1) + 0.1)
plot(eruptions, rep(0, n_eruptions), 
  pch = "|", axes = FALSE)
axis(1)
box()
```

```{r}
#| output: false
avg_years_between_eruptions <- mean(diff(eruptions[-n_eruptions]))
avg_years_between_eruptions
```

Based on data up to and including 1971, eruptions on La Palma happen every `r round(avg_years_between_eruptions, 1)` years on average.

Studies of the magma systems feeding the volcano, such as @marrero2019, have proposed that there are two main magma reservoirs feeding the Cumbre Vieja volcano; one in the mantle (30-40km depth) which charges and in turn feeds a shallower crustal reservoir (10-20km depth).

Eight eruptions have been recorded since the late 1400s (@fig-timeline).

Data and methods are discussed in @sec-data-methods.

Let $x$ denote the number of eruptions in a year. Then, $x$ can be modeled by a Poisson distribution

$$
p(x) = \frac{e^{-\lambda} \lambda^{x}}{x !}
$$ {#eq-poisson}

where $\lambda$ is the rate of eruptions per year. Using @eq-poisson, the probability of an eruption in the next $t$ years can be calculated.

| Name                | Year |
|---------------------|------|
| Current             | 2021 |
| Tenegu√≠a            | 1971 |
| Nambroque           | 1949 |
| El Charco           | 1712 |
| Volc√°n San Antonio  | 1677 |
| Volc√°n San Martin   | 1646 |
| Tajuya near El Paso | 1585 |
| Monta√±a Quemada     | 1492 |

: Recent historic eruptions on La Palma {#tbl-history}

@tbl-history summarises the eruptions recorded since the colonization of the islands by Europeans in the late 1400s.

![Map of La Palma](images/la-palma-map.png){#fig-map}

La Palma is one of the west most islands in the Volcanic Archipelago of the Canary Islands (@fig-map).

{{< embed notebooks/explore-earthquakes.qmd#fig-spatial-plot >}}

@fig-spatial-plot shows the location of recent Earthquakes on La Palma.

## Data & Methods {#sec-data-methods}

## Conclusion

## References {.unnumbered}

::: {#refs}
:::
